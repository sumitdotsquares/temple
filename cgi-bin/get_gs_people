#!/usr/bin/perl

use strict;
use CGI qw/:all/;
use CGI::Carp 'fatalsToBrowser';
use Spreadsheet::XLSX;
use HTML::TableExtract;
use WWW::Mechanize;
use HTML::Parser;
use HTML::Entities;
use URI::Escape;

my @pwuid = getpwuid($<);
my $owner = $pwuid[0];
my $homedir = $pwuid[7];

my $docroot = $ENV{'DOCUMENT_ROOT'};

my $textdir = $docroot . '/includes/text';

my $xlsx = Spreadsheet::XLSX -> new ($docroot . '/includes/data/people.xlsx');

my ($headings,@rows) = get_headings_and_rows(get_worksheet('',$xlsx));

print header;

my $default_html = getvalue($docroot . '/includes/html/person-gs.html');



my @html;

for my $row (@rows) { 
	next if ($row->{last} =~ /^#/);
	next if ($row->{last} eq 'last');
	next unless ($row->{gs});
#	($row->{cit},$row->{h},$row->{i10}) = get_gs($row->{gs});
	$row->{bio} =~ /file:(.*?)$/;
	$row->{bio} = getvalue($textdir . '/' . $1) ;
	$row->{bio} =~ s/^\s+//g;
	if ($row->{bio}) { $row->{class} = "avatar avatar-bio"; }
	else { $row->{class} = "avatar"; }
	my $img = $row->{avatar};
	if (($img) and (-e $docroot . '/includes/img/staff/' . $img)) { $row->{avatar} = '/includes/img/staff/' . $img; }
	else { $row->{avatar} = '/includes/img/staff/default.gif'; }
	my $html = $default_html;
	for ('first','last','middle','class','gs','avatar','email') { #,'cit','i10','h') { 
		my $UC = uc $_; 
		my $replac = $row->{$_}; 
		$html =~ s/$UC/$replac/g;
	}
	push @html, $html;
}

print ul({-id=>'autofill',-class=>'row'},@html);

##########################################


sub getvalue {
	my $file = $_[0];
	return unless (-e $file);
	open FILE, '<', $file;
	my @lines = <FILE>;
	close FILE;
	my $output = join "\n", @lines;
	return $output;
}

sub get_gs {
	my $url = $_[0];
	my $mech = WWW::Mechanize->new();
	$url =~ s/https/http/;
	$mech->get($url);
	my $html = $mech->content();
	my $te = new HTML::TableExtract( headers => ["Citation indices", "All", "Since 2011"] );
	$te->parse($html);
 	# assume there is only one matching table
 	my $ts = $te->first_table_state_found();
	# first row is citations
	my $row = $ts->rows->[0];
	# second column
	my $cit = $row->[1];
	# second row is h-index
	my $row = $ts->rows->[1];
	# second column
	my $h = $row->[1];
	# third row is i10-index
	my $row = $ts->rows->[2];
	# second column
	my $i10 = $row->[1];
	return ($cit,$h,$i10);
}



# returns array of rows of worksheet
# each row a hashref whose  keys are 
# the headings and the values are the 
# corresponding cell  values
# also returns headings as array ref

sub get_headings_and_rows {
        my $sheet = $_[0];
        my @rows;
        my $headings;
        foreach my $col (0 ..  $sheet -> {MaxCol}) {
                my $heading = $sheet -> {Cells} [0] [$col];
                # remove leading and trailing whitespace
                if ($heading -> {Val}) {
                        $heading -> {Val} =~ s/\s+$//;
                        $heading -> {Val} =~s/^\s+//;
                }
                if ($heading) { push @$headings, $heading -> {Val}; }
        }
        foreach my $row (1 .. $sheet -> {MaxRow}) {
                my $h;
                foreach my $col (0 ..  $sheet -> {MaxCol}) {
                        my $cell = $sheet -> {Cells} [$row] [$col];
                        my $heading = $headings -> [$col];
                        if ($heading) {
                                if ($cell -> {Val}) { $h -> {$heading} =  $cell -> {Val}; }
                                else { $h -> {$heading} = ''; }
                        }
                }
                push @rows, $h;
        }
        return ($headings,@rows);
}



# returns worksheet  corresponding to excel file 
# and worksheet name

sub get_worksheet {
        my ($name,$excel) = @_;
        my @worksheets = @{$excel -> {Worksheet}};
        if ($#worksheets == 0) { return $worksheets[0]; }
        for (@{$excel -> {Worksheet}}) {
                next unless ($_->{Name} eq $name);
                return $_;
        }
        die "worksheet $name nonexistent in excel\n";
}


#!/usr/bin/perl

use strict;
use CGI qw/:all/;
use CGI::Pretty;
use CGI::Carp 'fatalsToBrowser';
use Text::CSV;
use URI;
use  Image::ExifTool 'ImageInfo';
use POSIX;


my @pwuid = getpwuid($<);
my $owner = $pwuid[0];
my $homedir = $pwuid[7];

my $docroot = $ENV{'DOCUMENT_ROOT'};
unless ($docroot) { $docroot = '/imports/www/math'; }

my $uri = URI->new($ENV{'REQUEST_URI'},'https');
my $uri = $uri->path();
$uri =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;


#this is relative to $docroot
my $dir = param('dir');
$dir =~ s/$docroot//;
unless ($dir =~ /^\//) { $dir = $uri . $dir; }

my $w = param('width');
print header;

exit unless (-d $docroot . $dir);
exit unless ($dir and $w);

my $exifTool = new Image::ExifTool;

my ($aspect,$orientation,@images) = get_images($docroot . $dir); 

if (param('order') eq 'chrono') { @images = sort { age($a) <=> age($b) } @images; }
elsif (-e $docroot . '/' . $dir . '/.order')  {
	my $order = get_order($dir);
	@images = sort { $order->{$a} <=> $order->{$b} } @images;
}
	

print p("Click on each image for closeup.");

my $width;


for (@images) {
	print qq(<a target="_blank" href="$dir/$_"> <img src="$dir/$_" style="width: $w%; margin-bottom: 5px;"> </a>\n);
}



#############################

sub get_images {
        my $dir = $_[0];
        return unless (-d $dir);
        opendir DIR, $dir;
        my @dirs = readdir DIR;
        closedir DIR;
        my @navbar;
        for (@dirs) {
                next if (/^\./);
                my $h = $exifTool->ImageInfo($dir . '/' . $_);
                $aspect->{$_} = $h->{'ImageWidth'}/$h->{'ImageHeight'};
		if ($h->{'ImageWidth'} > $h->{'ImageHeight'}) { 
			$width->{$_} = floor($w * ($h->{'ImageWidth'} / $h->{'ImageHeight'})**2); 
			#$width->{$_} = $w;
		}
		else { $width->{$_} = $w; }
		if ($aspect->{$_}) { push @navbar, $_; }
        }
        return ($aspect,$width,sort { $aspect->{$a} <=> $aspect->{$b} } @navbar);
}

sub get_order {
        # $dir is relative to $docroot without leading and trailing /
        my $dir = $_[0];
        # if not, remove leading and trailing /
        $dir =~ s/^\///;
        $dir =~ s/\/$//;
        my $order;
        return unless (-d $docroot . '/' . $dir);
        opendir DIR, $docroot . '/' . $dir;
        my @dirs = readdir DIR;
        closedir DIR;
        for (@dirs) {
                next if (/^\./);
                next unless (-d $docroot . '/' . $dir . '/' . $_);
                $order->{$_} = 1000;
        }
        return $order unless (-e $docroot . '/' . $dir . '/.order');
        open FILE, $docroot . '/' . $dir . '/.order';
        my @dirs = <FILE>;
        close FILE;
        chomp @dirs;
        for (0..$#dirs) { $order->{$dirs[$_]} = $_+1; }
        return $order;
}

sub age {
	my $file = $_[0];
	return unless (-e $file);
	my $exifTool = new Image::ExifTool;
	my $h = $exifTool->ImageInfo($file);
	my $date = $h->{'CreateDate'};
	$date =~ s/ /:/;
	my @d = split ':', $date;
	$d[5]+60*($d[4]+60*($d[3]+24*($d[2]+30*($d[1]+12*$d[0]))));
}

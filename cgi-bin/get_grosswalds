#!/usr/bin/perl

use strict;
use warnings;

# for debugging
use CGI qw/:all/;
use JSON;
use URI;
use LWP::UserAgent;
use HTTP::Request;
require LWP::Protocol::https;
use Data::Dumper;
use Date::Parse;
use File::Path;
use Date::Calc qw( Today Day_of_Week Day_of_Week_to_Text);


my $months = [ 'January', 'February','March','April','May','June','July','August','September','October','November','December' ];

my $mos = [ 'jan', 'feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec' ];


my $docroot = $ENV{'DOCUMENT_ROOT'};
unless ($docroot) { $docroot = '/imports/www/math'; }

my $google = 'math.temple.edu@gmail.com';

my $api_key = 'AIzaSyAloGvhTlPnR43-fdvLsLSfeQmBtn3IpN8';

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
# $yearstart is january 1 midnight
my @date = ($year+1900,1,1,0,0,0);
my $yearstart = sprintf("%d-%02d-%02dT%02d:%02d:%02d-04:00", @date);
@date = ($year+1900,12,31,23,59,59);
my $yearend = sprintf("%d-%02d-%02dT%02d:%02d:%02d-04:00", @date);

#my %options = ( 'singleEvents' => 'True', 'orderBy' => 'startTime', 'timeMin' => $yearstart , 'timeMax' => $yearend );
my %options = ( 'singleEvents' => 'True', 'orderBy' => 'startTime');

# only downloads events starting from today
my $items = get_calendar_events($google, $api_key, %options, 'timeMin' => $yearstart);

my $uri = URI->new($ENV{'REQUEST_URI'},'https');
my $path = $uri->path();
$path =~ s/%([0-9A-Fa-f]{2})/chr(hex($1))/eg;

# extract last path component of URI
# last component = seminar folder and also = seminar hashtag
# below filter out events not containing hashtag
$path =~ /\/([^\/]*?)\/$/;
#my $seminar = $1;
#my $hashtag = '#' . $1;

my @seminars = get_seminars();

my $seminar = 'grosswald';

my @events;

my $imagedir = '/includes/img/staff';

my @grosswalds;
my $grosswald = [];
my @rawgrosswalds;
my $content;

# this assumes the hashtags are in chrono order: #grosswald1, #grosswald2, etc

for my $item (@{$items->{items}}) {
	next unless (defined $item->{summary});
	next unless (defined $item->{location});
	next unless (defined $item->{description});
	$content = $item->{summary} . $item->{location} . $item->{description};
	next unless ($content =~ /#grosswald/si);
	push @rawgrosswalds, $item;
}

my $current = [];

for my $item (@rawgrosswalds) {
	$content = $item->{summary} . $item->{location} . $item->{description};
        if ($content =~ /#grosswald1/si) { 
		if (@{$current}) { push @grosswalds, $current; }
		$current = [ $item ]; 
	}
	else { $current  = [ @{$current}, $item ]; }
}

push @grosswalds, $current; 

print header;

#if no grosswald exit
if (($#grosswalds == 0) and ($#{$grosswalds[0]} == -1)) { exit; }



# @grosswalds is the array of all grosswald talk tuples

my $past;
my $m;
my $y;
my $M;

# when installing, initialize gdrive as math.temple.edu@gmail.com
my $gd = "/imports/temple/bin/gdrive --config /usr/home/local/users/math/.gdrive download --path $docroot/$imagedir";

for my $grosswald (@grosswalds) {
	my $talk = shift @{$grosswald};
	my $filename = $talk->{attachments}->[0]->{title};
	my $fileId = $talk->{attachments}->[0]->{fileId};
	unless (-e $docroot . '/' . $imagedir . '/' . $filename) { system "$gd $fileId > /dev/null"; }
	my $html = get_avatar($filename);
	$talk->{description} =~ s/^(.*?)(\n|$)//;
	my ($speaker, $affiliation) = split ',', $1;
	$affiliation =~ s/\.$//;
	$html .= h2($speaker . br . $affiliation). br . br;
	my @talks;
	for ($talk,@{$grosswald}) {
		my $talkhtml  = div(i($_->{summary}));
	        my $date = $_->{start}->{dateTime};
        	my ($ss,$mm,$hh,$day,$month,$year,$zone) = strptime($date);
		$m = $mos->[$month];
        	my $time = $hh . ':' . $mm; 
        	$day =~ s/^0//;
	        $year += 1900;
		my $weekday = Day_of_Week_to_Text(Day_of_Week($year,$month+1,$day));
		$y = $year;
		$M = $months->[$month];
	        $date = $weekday . ' ' . $months->[$month] . ' ' . $day . ', ' . $year;
		$talkhtml .= div($date . ' at ' . $time . ', ' . $_->{location});
		#remove speaker and affiliation
		$_->{description} =~ s/^(.*?)(\n|$)//;
	        $_->{description} =~ s/\n+/<\/p><p>/g;
	        $_->{description} = '<p>' . $_->{description} . '</p>';
		$talkhtml .= div($_->{description});
		push @talks, li(div({-class=>'card'},$talkhtml));
	}
	$html .= ul({-class=>'cards'},@talks);
	#remove hashtags
	$html =~ s/#grosswald\d//sg; 
        $html =~ s/#news//gsi;
        for (@seminars) { $html =~ s/#$_//gsi; }
	$past = $docroot . '/events/seminars/grosswald/past/' . $m . $y;
	#if (-d $past) { next; }
	#else  { mkpath($past); }
	unless (-d $past) { mkpath($past); }
	open FILE, '>', $past . '/index.html';
	print FILE "<!--#include virtual='/cgi-bin/get_header' -->";
	print FILE "<!--#include virtual='/cgi-bin/get_grosswalds' -->";
	print FILE $html;
	print FILE h2('Past Grosswald Lectures');
	print FILE "<a href='https://en.wikipedia.org/wiki/Emil_Grosswald' target='_blank'>
		<!--#include virtual='/cgi-bin/get_avatar?email=grosswald' --> </a>";
	print FILE "<!--#include virtual='/cgi-bin/get_past_grosswalds_link' -->";
	print FILE br.br.br.br."<!--#include virtual='/cgi-bin/get_footer' -->";
	close FILE;
	open FILE, '>', $past . '/.title';
	print FILE 'Emil Grosswald Lectures <br> ' . $M . ' ' . $y;
	close FILE;
	open FILE, '>>', $docroot . '/events/seminars/grosswald/.order';
	print FILE $m . $y, "\n";
	close FILE;
}

chdir $docroot . '/events/seminars/grosswald';
unlink 'index.html';
symlink 'past/' . $m . $y . '/index.html', 'index.html';




############################################################################

# INPUT: email address of the account whose calendar we are querying,
#       API key allowed to query it,
#       hash of key/value pairs for the query.
# RETURNS: perl object of the response for a list request against
#       the calendar events from the Google calendar v3 API.
# NOTE: The key/value pairs for the query are the optional 
#       query parameters for the API request.  The response is the perl form
#       of the object described in the API.  For documentation, see:
# https://developers.google.com/google-apps/calendar/v3/reference/events/list
# NOTE: This gets all results matching your request.  It overrides any maxResults
#       specified, and continues to query until there are no more results.
sub get_calendar_events {
        my ($calendar,$apikey,@data) = @_;
        return unless ($calendar and $apikey);
        return if (@data % 2);

        # Get the data as a hash.
        my %datahash = ( @data );

        # Enforce the key as the API key
        $datahash{key} = $apikey;

        # Define the maxResults as 2500.
        $datahash{maxResults} = 2500;

        # Ensure that pageToken is returned if restricted fields are requested.
        if (defined $datahash{fields}) {
                unless ($datahash{fields} =~ m/\bnextPageToken\b/) {
                        $datahash{fields} .= ',nextPageToken';
                }
        }

        # Build the URI object
        # The URL for requesting calendar events
        my $url = 'https://www.googleapis.com/calendar/v3/calendars/' .
                $calendar . '/events';
        my $uri = URI->new($url);
        # With the query data.
        $uri->query_form(%datahash);

        # Do an initial request
        my $obj = get_json_object($uri);

        # List of previous events to keep while we're itterating
        my @events = ();

        # If there's a nextPageToken in the response, use it.
        while ($obj->{nextPageToken}) {
                 # save the previous events
                @events = map { $_ } @{$obj->{items}};

                # Update the data for the query to get the next page
                $datahash{pageToken} = delete $obj->{nextPageToken};

                # Make the URI aware of it
                $uri->query_form(%datahash);

                # Get the object for the next page.
                $obj = get_json_object($uri);

                # Glue previous events back in.
                unshift @{$obj->{items}}, @events;

        }

        # Return the object with all of the events
        return $obj;

}

# INPUT: email address of the account whose calendar we are querying,
#       API key allowed to query it,
#       hash of key/value pairs for the query.
# RETURNS: perl object of the response for a list request against
#       the calendar events from the Google calendar v3 API.
# NOTE: The key/value pairs for the query are the optional 
#       query parameters for the API request.  The response is the perl form
#       of the object described in the API.  For documentation, see:
# https://developers.google.com/google-apps/calendar/v3/reference/events/list
# NOTE: The default is a maximum of 250 results (via maxResults).  The 
#       maxResults can not be more than 2500.  The events returned from this
#       function have those limits imposed.
sub get_limited_calendar_events {
        my ($calendar,$apikey,@data) = @_;
        return unless ($calendar and $apikey);
        return if (@data % 2);

        # The URL for requesting calendar events
        my $url = 'https://www.googleapis.com/calendar/v3/calendars/' .
                $calendar . '/events';

        # Use URI to deal with all the ugliness of URL mangling
        my $uri = URI->new($url);

        # Get the data as a hash.
        my %datahash = ( @data );

        # Enforce the key as the API key
        $datahash{key} = $apikey;

        # Set this as the query data
        $uri->query_form(%datahash);

        # Go get the object
        my $obj = get_json_object($uri);

        return $obj;
}

# INPUT: URI object
# RETURNS: Perl object representation of the JSON that is
#       a result of a GET request to the URI.
sub get_json_object {
        my $uri = shift;
        return unless $uri;

        # Build the HTTP request using the URI
        my $req = HTTP::Request->new('GET', $uri)
                or die "Unable to build HTTP request: $!";

        # Build a light-weight user agent to send the request.  
        my $ua = LWP::UserAgent->new( ssl_opts => { verify_hostname => 1 } )
                or die "Unable to set up LWP agent: $!";
        # Only allow https.
        $ua->protocols_allowed( [ 'https' ]);

        # Do the request
        my $res = $ua->request($req);

        # Handle unsuccessful requests.
        # NOTE: This is lazy -- 50x responses should be retried.
        die "Request was unsuccessful: " . $res->as_string()
                unless ($res->is_success());

        # Decode the response content
        my $obj = eval { decode_json($res->content()) };
        die "Failed to decode response JSON: $@" if "$@";

        # Return the perl object.
        return $obj;
}


sub clean {
	my $s = $_[0];
	$s = lc $s;
	$s =~ s/(^| )(.)/$1\u$2/g;
	$s =~ s/^\s*//;
	$s =~ s/\s*$//;
	return $s;
}

	

sub getvalue {
        my $file = $_[0];
        return unless (-e $file);
        open F, '<', $file;
        my @lines = <F>;
        close F;
        my $output = join "\n", @lines;
        return $output;
}


sub get_seminars {
        opendir DIR, $docroot .'/events/seminars';
        my @files = readdir DIR;
        closedir DIR;
        my @seminars;
        for (@files) {
                next if (/^\./);
                next unless (-d $docroot .'/events/seminars/' . $_);
                push @seminars,$_;
        }
        return @seminars;
}

sub get_avatar {
	my $file = $_[0];
	return qq(
	<div style="clear:left"> </div>
	<div class="person person-compact" style="float:left;margin-right:25px;">
		<img src="/includes/img/staff/$file" />
	</div>);
}

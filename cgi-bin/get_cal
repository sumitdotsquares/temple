#!/usr/bin/perl

use strict;
use warnings;

# for debugging
use CGI qw/:all/;
use JSON;
use URI;
use LWP::UserAgent;
use HTTP::Request;
require LWP::Protocol::https;
use Data::Dumper;
use Date::Parse;
use Date::Calc;

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
my @date = ($year+1900,$mon,$mday,$hour,$min,$sec);
my $now = sprintf("%d-%02d-%02dT%02d:%02d:%02d-04:00", @date);

my $docroot = $ENV{'DOCUMENT_ROOT'};

my $months = [ 'January', 'February','March','April','May','June','July','August','September','October','November','December' ];

my $google = 'math.temple.edu@gmail.com';

my $api_key = 'AIzaSyAloGvhTlPnR43-fdvLsLSfeQmBtn3IpN8';

my %options = ( 'singleEvents' => 'True', 'orderBy' => 'startTime', 'timeMin' => $now );

my $items = get_calendar_events($google, $api_key, %options);

# build event objects
#timeMax
#timeMin

my $default_html = getvalue($docroot . '/includes/html/event-fp.html');

my @html_events;

print header;

for my $item (@{$items->{items}}) {
	my $event;
	$event->{name} = $item->{summary};
	my @affiliation;
	if ($item->{description}) { 
		($event->{speaker},$event->{title},@affiliation) = split "\n",  $item->{description};
	}
	$event->{affiliation} = join '', @affiliation;
	my $url = $item->{attachments}->[0]->{fileUrl};
	if ($url) { $event->{url} = $url; }
	$event->{location} = $item->{location};
	my ($ss,$mm,$hh,$day,$month,$year,$zone) = strptime($item->{start}->{dateTime});
	$event->{starttime} = $hh . ':' . $mm;
	$day =~ s/^0//;
	$event->{startday} = $day;
	$event->{startmonth} = $months->[$month];
	$year += 1900;
	$event->{startyear} = $year;
	$event->{startdate} = $months->[$month] . ' ' . $day . ', ' . $year;
	($ss,$mm,$hh,$day,$month,$year,$zone) = strptime($item->{end}->{dateTime});
	$event->{endtime} = $hh . ':' . $mm; 
	$day =~ s/^0//;
        $event->{endday} = $day;
        $event->{endmonth} = $months->[$month];
        $year += 1900;
        $event->{endyear} = $year;
	$event->{enddate} = $months->[$month] . ' ' . $day . ', ' . $year;
	my $html = $default_html;
	for (keys %$event) { 
		my $KEY = uc $_;
		my $value = $event->{$_};
		$value =~ s/#[^#]*?\s//gs;
		next unless ($value);
		$html =~ s/$KEY/$value/sg; 
	}
	push @html_events,$html;
}

# output 3 most recent events, reverse chrono order 
my $count = 0;
while (@html_events) { 
	last if ($count == 2);
	print pop @html_events; 
	$count++; 
}






############################################################################

# INPUT: email address of the account whose calendar we are querying,
#       API key allowed to query it,
#       hash of key/value pairs for the query.
# RETURNS: perl object of the response for a list request against
#       the calendar events from the Google calendar v3 API.
# NOTE: The key/value pairs for the query are the optional 
#       query parameters for the API request.  The response is the perl form
#       of the object described in the API.  For documentation, see:
# https://developers.google.com/google-apps/calendar/v3/reference/events/list
# NOTE: This gets all results matching your request.  It overrides any maxResults
#       specified, and continues to query until there are no more results.
sub get_calendar_events {
        my ($calendar,$apikey,@data) = @_;
        return unless ($calendar and $apikey);
        return if (@data % 2);

        # Get the data as a hash.
        my %datahash = ( @data );

        # Enforce the key as the API key
        $datahash{key} = $apikey;

        # Define the maxResults as 2500.
        $datahash{maxResults} = 2500;

        # Ensure that pageToken is returned if restricted fields are requested.
        if (defined $datahash{fields}) {
                unless ($datahash{fields} =~ m/\bnextPageToken\b/) {
                        $datahash{fields} .= ',nextPageToken';
                }
        }

        # Build the URI object
        # The URL for requesting calendar events
        my $url = 'https://www.googleapis.com/calendar/v3/calendars/' .
                $calendar . '/events';
        my $uri = URI->new($url);
        # With the query data.
        $uri->query_form(%datahash);

        # Do an initial request
        my $obj = get_json_object($uri);

        # List of previous events to keep while we're itterating
        my @events = ();

        # If there's a nextPageToken in the response, use it.
        while ($obj->{nextPageToken}) {
                 # save the previous events
                @events = map { $_ } @{$obj->{items}};

                # Update the data for the query to get the next page
                $datahash{pageToken} = delete $obj->{nextPageToken};

                # Make the URI aware of it
                $uri->query_form(%datahash);

                # Get the object for the next page.
                $obj = get_json_object($uri);

                # Glue previous events back in.
                unshift @{$obj->{items}}, @events;

        }

        # Return the object with all of the events
        return $obj;

}

# INPUT: email address of the account whose calendar we are querying,
#       API key allowed to query it,
#       hash of key/value pairs for the query.
# RETURNS: perl object of the response for a list request against
#       the calendar events from the Google calendar v3 API.
# NOTE: The key/value pairs for the query are the optional 
#       query parameters for the API request.  The response is the perl form
#       of the object described in the API.  For documentation, see:
# https://developers.google.com/google-apps/calendar/v3/reference/events/list
# NOTE: The default is a maximum of 250 results (via maxResults).  The 
#       maxResults can not be more than 2500.  The events returned from this
#       function have those limits imposed.
sub get_limited_calendar_events {
        my ($calendar,$apikey,@data) = @_;
        return unless ($calendar and $apikey);
        return if (@data % 2);

        # The URL for requesting calendar events
        my $url = 'https://www.googleapis.com/calendar/v3/calendars/' .
                $calendar . '/events';

        # Use URI to deal with all the ugliness of URL mangling
        my $uri = URI->new($url);

        # Get the data as a hash.
        my %datahash = ( @data );

        # Enforce the key as the API key
        $datahash{key} = $apikey;

        # Set this as the query data
        $uri->query_form(%datahash);

        # Go get the object
        my $obj = get_json_object($uri);

        return $obj;
}

# INPUT: URI object
# RETURNS: Perl object representation of the JSON that is
#       a result of a GET request to the URI.
sub get_json_object {
        my $uri = shift;
        return unless $uri;

        # Build the HTTP request using the URI
        my $req = HTTP::Request->new('GET', $uri)
                or die "Unable to build HTTP request: $!";

        # Build a light-weight user agent to send the request.  
        my $ua = LWP::UserAgent->new( ssl_opts => { verify_hostname => 1 } )
                or die "Unable to set up LWP agent: $!";
        # Only allow https.
        $ua->protocols_allowed( [ 'https' ]);

        # Do the request
        my $res = $ua->request($req);

        # Handle unsuccessful requests.
        # NOTE: This is lazy -- 50x responses should be retried.
        die "Request was unsuccessful: " . $res->as_string()
                unless ($res->is_success());

        # Decode the response content
        my $obj = eval { decode_json($res->content()) };
        die "Failed to decode response JSON: $@" if "$@";

        # Return the perl object.
        return $obj;
}


sub clean {
	my $s = $_[0];
	$s = lc $s;
	$s =~ s/(^| )(.)/$1\u$2/g;
	$s =~ s/^\s*//;
	$s =~ s/\s*$//;
	return $s;
}

	

sub getvalue {
        my $file = $_[0];
        return unless (-e $file);
        open FILE, '<', $file;
        my @lines = <FILE>;
        close FILE;
        my $output = join "\n", @lines;
        return $output;
}
